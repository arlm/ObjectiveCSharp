Compiler operations

The compiler has a number of phases:

* Parsing

	Initially the compiler parses all the source files and keeps a
	parsed representation in memory. Also syntax error checking
	is performed at this point.

	The compiler stores the information in classes whose names
	represent the language construct, for example, the "if"
	construct is stored in an `If' class.  A class is stored in a
	`Class'.
	
* Type creation

	Once the parsing has happened, compiled types are created. What
	is actually created is only a type skeleton including name,
	correct nesting, type parameters definitions. Types are created
	before any referenced types are loaded to ensure that locally
	defined type is used when an external assembly references a type
	with same name as compiled type.

* References loading

	As a next step referenced assemblies and modules are loaded and
	their top-level types are imported and cached. We import only
	C# valid top level types at this point all other members are
	imported on demand when needed.
	
* Namespaces definition

	Before any type resolution can be done we define all compiled
	namespaces. This is mainly done to prepare using clauses of each
	namespace block before any type resolution takes a place.
	
* Types definition

	The first step of type definition is to resolve base class or
	base interfaces to correctly setup type hierarchy before any
	member is defined.
	
	At this point we do some error checking and verify that the
	members inheritance is correct and some other members
	oriented checks.

	By the time we are done, all classes, structs and interfaces
	have been defined and all their members have been defined as
	well.

* Emit aka Code Generation

	At this stage the CIL code is generated together with other
	metadata including attributes, constants, type parameter constraints.
	Before any method body code is generated its body is first
	resolved and check for errors including flow analysis.

* Statements

	Most of the statements are handled in the statement.cs file.

* Expressions

* MemberCache

	MemberCache is one of core compiler components. It maintains information
	about types and their members. It tries to be as fast as possible
	because almost all resolve operations end up querying members info in
	some way.
	
	MemberCache is not definition but specification oriented to maintain
	differences between inflated versions of generic types. This makes usage
	of MemberCache simple because consumer does not need to care how to inflate
	current member and returned type information will always give correctly
	inflated type. However setting MemberCache up is one of the most complicated
	parts of the compiler due to possible dependencies when types are defined
	and complexity of nested types.

* Error reporting

	Always use `Report::Error' or `Report::Warning' methods of Report
	class. The actual Report instance is available via local context.
	An expression error reporting has to be done during Resolve phase,
	except when it's Emit specific (very rare).

	Error reporting should try to use the same codes that the
	Microsoft compiler uses (if only so we can track which errors
	we handle and which ones we don't).

	If there is an error which is specific to MSC, use negative
	numbers, and register the number in mcs/errors/errors.txt

	Try to write a test case for any error that you run into the
	code of the compiler if there is none already.

	Put your test case in a file called csNNNN.cs in the
	mcs/errors directory, and have the first two lines be:

	// csNNNN.cs: This is the error message
	// Line: XXX
	// Compiler options: an optional compiler options

	Where `XXX' is the line where the error ocurrs.  We will later
	use this as a regression test suite for catching errors in the
	compiler. 
